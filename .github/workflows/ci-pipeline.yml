name: Build and Deploy Backend and Frontend using GHCR

on:
  push:
    branches:
      - "*" # Für alle Branches
  pull_request:
    branches:
      - "*" # Für Pull Requests auf alle Branches
  workflow_dispatch: # Manuelles Triggern erlauben

jobs:

#  frontend-build:
#    name: Build Frontend
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. Checkout Repository
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      # 2. Set up Node.js
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '18'
#
#      # 3. Cache Node.js modules
#      - name: Cache Node.js modules
#        uses: actions/cache@v3
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-node-
#
#      # 4. Install Frontend Dependencies
#      - name: Install Frontend Dependencies
#        run: |
#          cd frontend
#          npm install
#
#      # 5. Verify react-scripts Installation
#      - name: Verify react-scripts Installation
#        run: |
#          cd frontend
#          npm list react-scripts
#
#      # 6. Build Frontend
#      - name: Build Frontend
#        run: |
#          cd frontend
#          npm run build
#
#      # 7. Build Docker Image for Frontend
#      - name: Build Frontend Docker Image
#        env:
#          REPO_OWNER_LOWERCASE: ${{ github.repository_owner }}
#        run: |
#          REPO_OWNER_LOWERCASE=$(echo $REPO_OWNER_LOWERCASE | tr '[:upper:]' '[:lower:]')
#          docker build -t ghcr.io/$REPO_OWNER_LOWERCASE/frontend:latest ./frontend
#
#      # 8. Push Frontend Docker Image
#      - name: Push Frontend Docker Image
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - env:
#          REPO_OWNER_LOWERCASE: ${{ github.repository_owner }}
#        run: |
#          REPO_OWNER_LOWERCASE=$(echo $REPO_OWNER_LOWERCASE | tr '[:upper:]' '[:lower:]')
#          docker push ghcr.io/$REPO_OWNER_LOWERCASE/frontend:latest
#
#  backend-build:
#    name: Build Backend
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. Checkout Repository
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      # 2. Set up Java
#      - name: Set up Java
#        uses: actions/setup-java@v3
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#
#      # 3. Build Backend
#      - name: Build Backend with Gradle
#        run: |
#          cd backend
#          gradle build
#
#      # 4. Build Docker Image for Backend
#      - name: Build Backend Docker Image
#        env:
#          REPO_OWNER_LOWERCASE: ${{ github.repository_owner }}
#        run: |
#          REPO_OWNER_LOWERCASE=$(echo $REPO_OWNER_LOWERCASE | tr '[:upper:]' '[:lower:]')
#          docker build -t ghcr.io/$REPO_OWNER_LOWERCASE/backend:latest ./backend
#
#      # 5. Push Backend Docker Image
#      - name: Push Backend Docker Image
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - env:
#          REPO_OWNER_LOWERCASE: ${{ github.repository_owner }}
#        run: |
#          REPO_OWNER_LOWERCASE=$(echo $REPO_OWNER_LOWERCASE | tr '[:upper:]' '[:lower:]')
#          docker push ghcr.io/$REPO_OWNER_LOWERCASE/backend:latest

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.5'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          npm-version: '9.0.0'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build Frontend
        working-directory: frontend/src
        run: |
          npm ci
          npm run build

      - name: Build and Test Backend
        run: |
          gradle build test jacocoTestReport

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: backend/build/reports/tests/test/

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/build/reports/jacoco/test/html/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

#  deploy:
#    name: Deploy Application
#    needs:
#      - build
##      - backend-build
##      - frontend-build
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. Checkout Repository
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      # 2. Deploy with Docker Compose
#      - name: Deploy with Docker Compose
#        env:
#          BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/backend:latest
#          FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/frontend:latest
#        run: |
#          docker-compose down || true
#          docker-compose up -d
