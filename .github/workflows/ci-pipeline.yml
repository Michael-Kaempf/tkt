name: Build and Deploy Backend and Frontend using GHCR

on:
  push:
    branches:
      - "*" # Für alle Branches
  pull_request:
    branches:
      - "*" # Für Pull Requests auf alle Branches
  workflow_dispatch: # Manuelles Triggern erlauben

permissions:
  contents: read
  packages: write

jobs:

#  frontend-build:
#    name: Build Frontend
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. Checkout Repository
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      # 2. Set up Node.js
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '18'
#
#      # 3. Cache Node.js modules
#      - name: Cache Node.js modules
#        uses: actions/cache@v3
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-node-
#
#      # 4. Install Frontend Dependencies
#      - name: Install Frontend Dependencies
#        run: |
#          cd frontend
#          npm install
#
#      # 5. Verify react-scripts Installation
#      - name: Verify react-scripts Installation
#        run: |
#          cd frontend
#          npm list react-scripts
#
#      # 6. Build Frontend
#      - name: Build Frontend
#        run: |
#          cd frontend
#          npm run build
#
#      # 7. Build Docker Image for Frontend
#      - name: Build Frontend Docker Image
#        env:
#          REPO_OWNER_LOWERCASE: ${{ github.repository_owner }}
#        run: |
#          REPO_OWNER_LOWERCASE=$(echo $REPO_OWNER_LOWERCASE | tr '[:upper:]' '[:lower:]')
#          docker build -t ghcr.io/$REPO_OWNER_LOWERCASE/frontend:latest ./frontend
#
#      # 8. Push Frontend Docker Image
#      - name: Push Frontend Docker Image
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - env:
#          REPO_OWNER_LOWERCASE: ${{ github.repository_owner }}
#        run: |
#          REPO_OWNER_LOWERCASE=$(echo $REPO_OWNER_LOWERCASE | tr '[:upper:]' '[:lower:]')
#          docker push ghcr.io/$REPO_OWNER_LOWERCASE/frontend:latest
#
#  backend-build:
#    name: Build Backend
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. Checkout Repository
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      # 2. Set up Java
#      - name: Set up Java
#        uses: actions/setup-java@v3
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#
#      # 3. Build Backend
#      - name: Build Backend with Gradle
#        run: |
#          cd backend
#          gradle build
#
#      # 4. Build Docker Image for Backend
#      - name: Build Backend Docker Image
#        env:
#          REPO_OWNER_LOWERCASE: ${{ github.repository_owner }}
#        run: |
#          REPO_OWNER_LOWERCASE=$(echo $REPO_OWNER_LOWERCASE | tr '[:upper:]' '[:lower:]')
#          docker build -t ghcr.io/$REPO_OWNER_LOWERCASE/backend:latest ./backend
#
#      # 5. Push Backend Docker Image
#      - name: Push Backend Docker Image
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - env:
#          REPO_OWNER_LOWERCASE: ${{ github.repository_owner }}
#        run: |
#          REPO_OWNER_LOWERCASE=$(echo $REPO_OWNER_LOWERCASE | tr '[:upper:]' '[:lower:]')
#          docker push ghcr.io/$REPO_OWNER_LOWERCASE/backend:latest

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.5'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          npm-version: '9.0.0'

      # Backend Cache
      - name: Cache Backend Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-backend-${{ hashFiles('backend/**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-backend-

      # Frontend Cache
      - name: Cache Frontend Node modules
        uses: actions/cache@v3
        with:
          path: frontend/src/node_modules
          key: ${{ runner.os }}-node-frontend-${{ hashFiles('frontend/src/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-frontend-

      # Docker Layer Caching for Backend
      - name: Cache Backend Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-backend
          key: ${{ runner.os }}-buildx-backend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-backend-

      # Docker Layer Caching for Frontend
      - name: Cache Frontend Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-frontend
          key: ${{ runner.os }}-buildx-frontend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-

      - name: Build Frontend
        working-directory: frontend/src
        run: |
          npm ci
          npm run build

      - name: Build and Test Backend
        run: |
          gradle build test jacocoTestReport

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: backend/build/reports/tests/test/

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/build/reports/jacoco/test/html/

      - name: Set Docker tags
        id: docker-tags
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "backend_tags=${BACKEND_IMAGE}:${VERSION},${BACKEND_IMAGE}:latest" >> $GITHUB_OUTPUT
            echo "frontend_tags=${FRONTEND_IMAGE}:${VERSION},${FRONTEND_IMAGE}:latest" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "backend_tags=${BACKEND_IMAGE}:latest" >> $GITHUB_OUTPUT
            echo "frontend_tags=${FRONTEND_IMAGE}:latest" >> $GITHUB_OUTPUT
          else
            BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
            SHA=$(git rev-parse --short HEAD)
            TAG="${BRANCH}-${SHA}"
            # Ensure the tag is valid by removing special characters and converting to lowercase
            TAG=$(echo "$TAG" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9.-]/-/g')
            echo "backend_tags=${BACKEND_IMAGE}:${TAG}" >> $GITHUB_OUTPUT
            echo "frontend_tags=${FRONTEND_IMAGE}:${TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TOKEN }}

#      # Backend Docker Image
#      - name: Extract metadata for Backend Docker
#        id: meta-backend
#        uses: docker/metadata-action@v5
#        with:
#          images: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/backend
#          tags: |
#            type=raw,value=latest,enable={{is_default_branch}}
#            type=sha,format=long
#            type=ref,event=branch
#            type=ref,event=tag
#            type=ref,event=pr
#            type=semver,pattern={{version}}
#            type=semver,pattern={{major}}.{{minor}}
#
#      - name: Build and push Backend Docker image
#        uses: docker/build-push-action@v5
#        with:
#          context: backend
#          file: backend/Dockerfile
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#          cache-from: type=local,src=/tmp/.buildx-cache-backend
#          cache-to: type=local,dest=/tmp/.buildx-cache-backend-new,mode=max

      # Backend Docker Image
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker-tags.outputs.backend_tags }}
          cache-from: type=local,src=/tmp/.buildx-cache-backend
          cache-to: type=local,dest=/tmp/.buildx-cache-backend-new,mode=max

      - name: Move Backend cache
        run: |
          rm -rf /tmp/.buildx-cache-backend
          mv /tmp/.buildx-cache-backend-new /tmp/.buildx-cache-backend

      # Frontend Docker Image
      - name: Extract metadata for Frontend Docker
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}/frontend
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache-frontend
          cache-to: type=local,dest=/tmp/.buildx-cache-frontend-new,mode=max

      - name: Move Frontend cache
        run: |
          rm -rf /tmp/.buildx-cache-frontend
          mv /tmp/.buildx-cache-frontend-new /tmp/.buildx-cache-frontend

#  deploy:
#    name: Deploy Application
#    needs:
#      - build
##      - backend-build
##      - frontend-build
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. Checkout Repository
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      # 2. Deploy with Docker Compose
#      - name: Deploy with Docker Compose
#        env:
#          BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/backend:latest
#          FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/frontend:latest
#        run: |
#          docker-compose down || true
#          docker-compose up -d
